"""
Helper functions to improve readability of model-generated text
"""

import re
import textwrap


def clean_children_gpt2(model_text, trim_dangling=True, quote_style="standard"):
    """
    Clean text generated by GPT2 fine-tuned on the bAbI CPT text. Optionally
    trim dangling final lines.

    Keyword arguments:
    trim_dangling -- if True, trim dangling sentences
    quote_style ["standard", "cursive"] -- if cursive, use `text' and ``text'',
    otherwise 'text' and "text"
    """

    model_text = model_text.rstrip()
    if quote_style == "cursive":
        model_text = re.sub(r"`` ", "``", model_text)
        model_text = re.sub(r"` ", "`", model_text)
        model_text = re.sub(r" ''", "''", model_text)
        model_text = re.sub(r" '", "'", model_text)
    else:
        model_text = re.sub(r"`` ", "-DQ-", model_text)
        model_text = re.sub(r"` ", "-SQ-", model_text)
        model_text = re.sub(r" ''", "-DQ-", model_text)
        model_text = re.sub(r" '", "-SQ-", model_text)
        model_text = re.sub("-DQ-", '"', model_text)
        model_text = re.sub("-SQ-", "'", model_text)
    model_text = re.sub(r"([,?!.]['\"])(\w)", "\g<1> \g<2>", model_text)

    if trim_dangling and re.match("[.?!]", model_text):
        eos_matcher = re.compile("[.?!]('|''|\")?")
        return model_text[: list(eos_matcher.finditer(model_text))[-1].end() + 1]

    return model_text


def wrap_print(cleaned_text, width=90):
    """
    Convenience function to nicely wrap and print cleaned text
    """
    for line in cleaned_text.split("\n"):
        print(*textwrap.wrap(line, width=width), sep="\n")
